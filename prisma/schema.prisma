generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model LegalQuestion {
  id           String         @id @default(cuid())
  title        String
  content      String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  userId       String?
  user         User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  answers      LegalAnswer[]
  topic        LegalTopics
  upvotes      Int            @default(0)
  downvotes    Int            @default(0)

  @@schema("public")
}

model LegalAnswer {
  id           String        @id @default(cuid())
  content      String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  userId       String?
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  questionId   String
  question     LegalQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  upvotes      Int           @default(0)
  downvotes    Int           @default(0)
  isAccepted   Boolean       @default(false)

  @@schema("public")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions     LegalQuestion[]
  answers       LegalAnswer[]

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model QuizQuestions {
  id       String      @id @default(cuid())
  question String
  option1  String
  option2  String
  option3  String
  option4  String
  correct  Int
  explanation String?
  topic    LegalTopics

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Quiz {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  questions  String[]

  @@schema("public")
}

enum LegalTopics {
  CONSTITUTIONAL_RIGHTS_AND_REMEDIES
  CRIMINAL_JUSTICE_SYSTEM
  FAMILY_AND_PERSONAL_LAWS
  PROPERTY_AND_CONTRACT_BASICS
  CONSUMER_AND_DIGITAL_PROTECTION
  EMPLOYMENT_AND_LABOUR_RIGHTS
  EVERYDAY_LEGAL_PROCEDURES

  @@schema("public")
}
